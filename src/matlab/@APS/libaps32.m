function [methodinfo,structs,enuminfo,ThunkLibName]=libaps32
%LIBAPS32 Create structures to define interfaces found in 'libaps'.

%This function was generated by loadlibrary.m parser version 1.1.6.35 on Wed May  8 09:23:17 2013
%perl options:'libaps.i -outfile=libaps32.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
%  int init (); 
fcns.name{fcnNum}='init'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int get_numDevices (); 
fcns.name{fcnNum}='get_numDevices'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void get_deviceSerial ( int , char *); 
fcns.name{fcnNum}='get_deviceSerial'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
%  int connect_by_ID ( int ); 
fcns.name{fcnNum}='connect_by_ID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int connect_by_serial ( char *); 
fcns.name{fcnNum}='connect_by_serial'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int disconnect_by_ID ( int ); 
fcns.name{fcnNum}='disconnect_by_ID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int disconnect_by_serial ( char *); 
fcns.name{fcnNum}='disconnect_by_serial'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int serial2ID ( char *); 
fcns.name{fcnNum}='serial2ID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int initAPS ( int , char *, int ); 
fcns.name{fcnNum}='initAPS'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
%  int read_bitfile_version ( int ); 
fcns.name{fcnNum}='read_bitfile_version'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int set_sampleRate ( int , int ); 
fcns.name{fcnNum}='set_sampleRate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int get_sampleRate ( int ); 
fcns.name{fcnNum}='get_sampleRate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int set_channel_offset ( int , int , float ); 
fcns.name{fcnNum}='set_channel_offset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single'};fcnNum=fcnNum+1;
%  float get_channel_offset ( int , int ); 
fcns.name{fcnNum}='get_channel_offset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int set_channel_scale ( int , int , float ); 
fcns.name{fcnNum}='set_channel_scale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single'};fcnNum=fcnNum+1;
%  float get_channel_scale ( int , int ); 
fcns.name{fcnNum}='get_channel_scale'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int set_channel_enabled ( int , int , int ); 
fcns.name{fcnNum}='set_channel_enabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int get_channel_enabled ( int , int ); 
fcns.name{fcnNum}='get_channel_enabled'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int set_trigger_source ( int , int ); 
fcns.name{fcnNum}='set_trigger_source'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int get_trigger_source ( int ); 
fcns.name{fcnNum}='get_trigger_source'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int set_trigger_interval ( int , double ); 
fcns.name{fcnNum}='set_trigger_interval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double'};fcnNum=fcnNum+1;
%  double get_trigger_interval ( int ); 
fcns.name{fcnNum}='get_trigger_interval'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int set_miniLL_repeat ( int , unsigned short ); 
fcns.name{fcnNum}='set_miniLL_repeat'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16'};fcnNum=fcnNum+1;
%  int set_waveform_float ( int , int , float *, int ); 
fcns.name{fcnNum}='set_waveform_float'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
%  int set_waveform_int ( int , int , short *, int ); 
fcns.name{fcnNum}='set_waveform_int'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int16Ptr', 'int32'};fcnNum=fcnNum+1;
%  int set_LL_data_IQ ( int , int , int , unsigned short *, unsigned short *, unsigned short *, unsigned short *, unsigned short *); 
fcns.name{fcnNum}='set_LL_data_IQ'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  int set_run_mode ( int , int , int ); 
fcns.name{fcnNum}='set_run_mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int set_repeat_mode ( int , int , int ); 
fcns.name{fcnNum}='set_repeat_mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int load_sequence_file ( int , const char *); 
fcns.name{fcnNum}='load_sequence_file'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
%  int clear_channel_data ( int ); 
fcns.name{fcnNum}='clear_channel_data'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int run ( int ); 
fcns.name{fcnNum}='run'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int stop ( int ); 
fcns.name{fcnNum}='stop'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int get_running ( int ); 
fcns.name{fcnNum}='get_running'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int set_log ( char *); 
fcns.name{fcnNum}='set_log'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int set_logging_level ( int ); 
fcns.name{fcnNum}='set_logging_level'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int save_state_files (); 
fcns.name{fcnNum}='save_state_files'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int read_state_files (); 
fcns.name{fcnNum}='read_state_files'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int save_bulk_state_file (); 
fcns.name{fcnNum}='save_bulk_state_file'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int read_bulk_state_file (); 
fcns.name{fcnNum}='read_bulk_state_file'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int raw_write ( int , int , unsigned char *); 
fcns.name{fcnNum}='raw_write'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  int raw_read ( int , int ); 
fcns.name{fcnNum}='raw_read'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  int read_register ( int , int , int ); 
fcns.name{fcnNum}='read_register'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int read_status_ctrl ( int ); 
fcns.name{fcnNum}='read_status_ctrl'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int program_FPGA ( int , char *, int , int ); 
fcns.name{fcnNum}='program_FPGA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
enuminfo.APSErrorCode=struct('APS_OK',0,'APS_UNKNOWN_ERROR',-1,'APS_FILE_ERROR',-2);
methodinfo=fcns;